{"version":3,"sources":["webpack://bpd-event-bus/webpack/universalModuleDefinition","webpack://bpd-event-bus/webpack/bootstrap","webpack://bpd-event-bus/./src/core/functions.ts","webpack://bpd-event-bus/./src/core/executors.ts","webpack://bpd-event-bus/./src/core/collection.ts","webpack://bpd-event-bus/./src/core/statics.ts","webpack://bpd-event-bus/./src/core/logger.ts","webpack://bpd-event-bus/./src/bus/handlers.ts","webpack://bpd-event-bus/./src/bus/performers.ts","webpack://bpd-event-bus/./src/core/errors.ts","webpack://bpd-event-bus/./src/bus/statics.ts","webpack://bpd-event-bus/./src/bus/engine.ts","webpack://bpd-event-bus/./src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bpd-event-bus\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bpd-event-bus\"] = factory();\n\telse\n\t\troot[\"bpd-event-bus\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { ContextArgument } from \"./interfaces\";\r\n\r\n/**\r\n * Checks if value is defined an is not null\r\n * Additionally with type check it can check value if it is not empty string or collection or object\r\n * \r\n * @param val - value\r\n * @param typecheck - default true - additional check whether value is not empty (string, collection, object)\r\n * @returns whether value passed all conditions\r\n */\r\nexport function is(val: any, typecheck: boolean = true): boolean {\r\n    if (typeof val !== 'undefined' && val !== null) {\r\n        if (!typecheck) {\r\n            return true;\r\n        } else {\r\n            return !isEmpty(val)\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Checks if value is empty string, array or object\r\n *\r\n *\r\n * @param val - value\r\n * @returns whether value passed all conditions\r\n */\r\nexport function isEmpty(val: any): boolean {\r\n    if (typeof val === \"string\") {\r\n        return val.length === 0\r\n    }\r\n    if (typeof val === \"boolean\") {\r\n        return val;\r\n    }\r\n    else if (Array.isArray(val)) {\r\n        return val.length === 0\r\n    }\r\n    return false\r\n}\r\n\r\n/**\r\n * Verifies whether attributes exist and have some values\r\n * @param attributes attributes list\r\n */\r\nexport function are(...attributes: any[]): boolean {\r\n    if (!is(attributes)) {\r\n        return false\r\n    }\r\n    let c = attributes.length;\r\n    for (let i = 0; i < c; i++) {\r\n        if (!is(attributes[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nexport function* counter() {\r\n    let idx = 0;\r\n    while (true) {\r\n        let reset = yield idx++;\r\n        if (reset || idx > 200000) {\r\n            idx = 0\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getContextArgumentId(ctx?: ContextArgument): string | null {\r\n    if (!ctx) {\r\n        return null;\r\n    } else if (typeof ctx === 'string') {\r\n        return ctx;\r\n    } else {\r\n        return ctx.eventId;\r\n    }\r\n}","import { is } from \"./functions\"\r\nimport { IBpdCallbackExecutor } from \"./interfaces\"\r\n\r\nexport class BpdCallbackExecutor implements IBpdCallbackExecutor {\r\n    async execute(callback: any, ctx: any, args: any[]): Promise<void> {\r\n        args = args ?? []\r\n        if (is(ctx) && typeof ctx !== 'string') {\r\n            callback.apply(ctx, args)\r\n        } else {\r\n            callback(...args)\r\n        }\r\n        return\r\n    }\r\n}","import { IBpdCollection, BpdCollectionPair } from \"./interfaces\";\r\nimport { is } from \"./functions\";\r\n\r\nexport class BpdEventsCollection<T> implements IBpdCollection<T> {\r\n    #keys: string[];\r\n    #values: T[];\r\n    constructor() {\r\n        this.#keys = []\r\n        this.#values = []\r\n    }\r\n\r\n\r\n    add(key: string, value: T): void {\r\n        if (is(key) && !this.has(key)) {\r\n            this.#keys.push(key);\r\n            this.#values.push(value);\r\n        }\r\n    }\r\n\r\n    remove(key: string): void {\r\n        if (is(key) && this.has(key)) {\r\n            let index = this.indexOf(key);\r\n            if (index > -1) {\r\n                this.#keys.splice(index, 1);\r\n                this.#values.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key: string): boolean {\r\n        return this.#keys.includes(key);\r\n    }\r\n\r\n    get(index: number): BpdCollectionPair<T> | null {\r\n        if (index > -1 && index < this.length()) {\r\n            return {\r\n                key: this.#keys[index],\r\n                value: this.#values[index]\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    first(): BpdCollectionPair<T> | null {\r\n        return this.get(0);\r\n    }\r\n\r\n    length(): number {\r\n        return this.#keys.length;\r\n    }\r\n\r\n    indexOf(key: string): number {\r\n        return this.#keys.indexOf(key);\r\n    }\r\n\r\n}","export const ERROR = \"ERROR\";\r\nexport const INFO = \"INFO\";","import { BpdEventLoggerCallback } from \"./interfaces\";\r\nimport { ERROR, INFO } from \"./statics\";\r\n\r\nexport interface IBpdEventBusLogging {\r\n    error(ctx: string, message?: string): void;\r\n    info(ctx: string, message?: string): void;\r\n    set(logger: BpdEventLoggerCallback): void;\r\n    get(): BpdEventLoggerCallback | undefined;\r\n}\r\n\r\nexport class BpdEventBusLogging implements IBpdEventBusLogging {\r\n    #logger: BpdEventLoggerCallback | undefined;\r\n\r\n    constructor(logger?: BpdEventLoggerCallback) {\r\n        this.#logger = logger;\r\n    }\r\n\r\n    set(logger?: BpdEventLoggerCallback) {\r\n        this.#logger = logger;\r\n    }\r\n\r\n    get() {\r\n        return this.#logger;\r\n    }\r\n\r\n    error(ctx: string, message?: string) {\r\n        this.log(ERROR, ctx, message);\r\n    }\r\n\r\n    info(ctx: string, message?: string) {\r\n        this.log(INFO, ctx, message);\r\n    }\r\n\r\n    private log(type: string, ctx: string, message?: string) {\r\n        if (this.#logger) {\r\n            this.#logger(type, ctx, new Date().toLocaleString(), message);\r\n        }\r\n    }\r\n}","import { BpdEventReceiver, IBpdEventEmitHandler, IBpdCallbackExecutor, BpdEventLoggerCallback, IBpdCollection, IBpdHandlerPerformer, EmitHandlerData } from \"../core/interfaces\";\r\nimport { is, counter } from \"../core/functions\";\r\nimport { INFO, ERROR } from \"../core/statics\";\r\nimport { BpdEventsCollection } from \"../core/collection\";\r\nimport { BpdEventBusLogging, IBpdEventBusLogging } from \"../core/logger\";\r\n\r\n\r\n\r\nabstract class EmitHandlerBase {\r\n    isBusy: boolean;\r\n    queue: IBpdCollection<EmitHandlerData>;\r\n    #logger: IBpdEventBusLogging;\r\n    #counter: Generator<number, void, unknown>;\r\n    #performer: IBpdHandlerPerformer;\r\n    constructor(type: string, performer: IBpdHandlerPerformer, logCallback?: BpdEventLoggerCallback) {\r\n        this.queue = new BpdEventsCollection();\r\n        this.#performer = performer;\r\n        this.isBusy = false;\r\n        this.#logger = new BpdEventBusLogging(logCallback);\r\n        this.#counter = counter();\r\n    }\r\n\r\n    async handle(event: string, events: BpdEventReceiver, id: string | null, args: any[]): Promise<boolean> {\r\n        if (!is(events)) {\r\n            this.#logger.error(\"handle\", \"No events provided\")\r\n            return false;\r\n        }\r\n        let key = this.createKey(event, args);\r\n        this.queue.add(key, {\r\n            events: events,\r\n            id: id,\r\n            args: args\r\n        })\r\n\r\n        if (!this.isBusy) {\r\n            this.isBusy = true;\r\n            let queueItem = null;\r\n            while (this.queue.length() > 0) {\r\n                queueItem = this.queue.first();\r\n                if (!queueItem) {\r\n                    break;\r\n                }\r\n                try {\r\n                    if (queueItem.value)\r\n                        await this.#performer.perform(queueItem.value);\r\n                } catch (e) {\r\n                    this.#logger.error(\"perform\", e.message)\r\n                } finally {\r\n                    this.queue.remove(queueItem.key);\r\n                }\r\n\r\n            }\r\n            this.isBusy = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    protected nextId(): string {\r\n        return \"#\" + this.#counter.next().value;\r\n    }\r\n\r\n    protected abstract createKey(event: string, args: any[]): string;\r\n\r\n}\r\n\r\nexport class BasicEventEmitHandler extends EmitHandlerBase implements IBpdEventEmitHandler {\r\n\r\n    constructor(performer: IBpdHandlerPerformer, logCallback?: BpdEventLoggerCallback) {\r\n        super(\"BasicEventEmitHandler\", performer, logCallback);\r\n    }\r\n\r\n    createKey(eventName: string, args: any[]): string {\r\n        return this.nextId();\r\n    }\r\n}\r\n\r\n// Extended handler\r\n\r\nexport class ExtendedEventEmitHandler extends EmitHandlerBase implements IBpdEventEmitHandler {\r\n    constructor(performer: IBpdHandlerPerformer, logCallback?: BpdEventLoggerCallback) {\r\n        super(\"ExtendedEventEmitHandler\", performer, logCallback);\r\n    }\r\n\r\n    createKey(eventName: string, args: any[]): string {\r\n        let count = is(args) ? args.length : 0;\r\n        let id = null;\r\n        if (count > 0) {\r\n            if (args.length === 1) {\r\n                let val = args[0];\r\n                if (typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean') {\r\n                    id = \"s:\" + val;\r\n                } else if (val.id) {\r\n                    id = \"ID:\" + val.id;\r\n                } else if (val.key) {\r\n                    id = \"KEY:\" + val.key;\r\n                }\r\n            } else {\r\n\r\n            }\r\n            return [eventName, count, id === null ? JSON.stringify(args) : id].join(\"-\");\r\n        }\r\n\r\n        return [eventName, count].join(\"-\");\r\n    }\r\n}\r\n\r\nexport class BpdEventEmitHandlerFactory {\r\n    static get(name: string, performer: IBpdHandlerPerformer, logCallback?: BpdEventLoggerCallback): IBpdEventEmitHandler {\r\n        switch (name) {\r\n            case \"extended\":\r\n                return new ExtendedEventEmitHandler(performer, logCallback);\r\n            default:\r\n                return new BasicEventEmitHandler(performer, logCallback);\r\n        }\r\n    }\r\n}","import { BpdCallbackExecutor } from \"../core/executors\";\r\nimport { is, getContextArgumentId } from \"../core/functions\";\r\nimport { IBpdHandlerPerformer, IBpdCallbackExecutor, EmitHandlerData } from \"../core/interfaces\";\r\n\r\nexport class BpdHandlePerformerBase {\r\n    protected idMatches(emitId: string | null, handleId: string | null) {\r\n        return !is(emitId) || (is(emitId) && emitId == handleId);\r\n    }\r\n}\r\n\r\nexport class BpdBasicHandlePerformer extends BpdHandlePerformerBase implements IBpdHandlerPerformer {\r\n    #executor: IBpdCallbackExecutor;\r\n    constructor(executor: IBpdCallbackExecutor) {\r\n        super();\r\n        this.#executor = executor;\r\n    }\r\n\r\n    async perform(data: EmitHandlerData): Promise<boolean> {\r\n        let event = null;\r\n        let handleId = null;\r\n        for (let id in data.events) {\r\n            event = data.events[id]\r\n            handleId = event.target ? getContextArgumentId(event.target) : null;\r\n            if (this.idMatches(data.id, handleId))\r\n                await this.#executor.execute(event.callback, event.ctx, data.args)\r\n\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\nexport class BpdAsyncHandlePerformer extends BpdHandlePerformerBase implements IBpdHandlerPerformer {\r\n    #executor: IBpdCallbackExecutor;\r\n    constructor(executor: IBpdCallbackExecutor) {\r\n        super();\r\n        this.#executor = executor;\r\n    }\r\n\r\n    async perform(data: EmitHandlerData): Promise<boolean> {\r\n        let promises: Promise<void>[] = []\r\n        let event = null;\r\n        let handleId = null;\r\n        for (let id in data.events) {\r\n            event = data.events[id]\r\n            handleId = getContextArgumentId(event.target);\r\n            if (this.idMatches(data.id, handleId))\r\n                promises.push(this.#executor.execute(event.callback, event.ctx, data.args))\r\n        }\r\n        await Promise.all(promises)\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function getPerformer(executor: BpdCallbackExecutor, policy?: string) {\r\n    return policy === \"tasked\" ? new BpdAsyncHandlePerformer(executor) : new BpdBasicHandlePerformer(executor);\r\n}","export class ErrorBase extends Error {\r\n    constructor(name: string, message?: string,) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class ArgumentError extends ErrorBase {\r\n    constructor(message?: string) {\r\n        super(\"ArgumentError\", message);\r\n    }\r\n}","import { IBpdEventBusInstanceSetup } from \"../core/interfaces\";\r\n\r\nexport function getDefaultBusSetup(): IBpdEventBusInstanceSetup {\r\n    return {\r\n        name: \"Default\",\r\n        handling: \"basic\",\r\n        policy: \"tasked\",\r\n        eventsDef: [],\r\n        priority: 99\r\n    }\r\n} ","import { are, is, counter, getContextArgumentId } from \"../core/functions\";\r\nimport { IBpdEventBus, BpdEventReceiver, IBpdEventEmitHandler, BpdEventLoggerCallback, ContextArgument, BpdEventBusSetup, BpdEventDetails, IBpdEventBusInstanceSetup, IBpdLoggable, IBpdBusMapping } from \"../core/interfaces\";\r\nimport { BpdCallbackExecutor } from \"../core/executors\";\r\nimport { BpdEventEmitHandlerFactory } from \"../bus/handlers\";\r\nimport { getPerformer } from \"../bus/performers\";\r\nimport { ArgumentError } from \"../core/errors\";\r\nimport { BpdEventBusLogging, IBpdEventBusLogging } from \"../core/logger\";\r\nimport { getDefaultBusSetup } from \"./statics\";\r\nexport { BpdEventContext as CuiEventContext } from \"../core/interfaces\";\r\n\r\nexport class BpdEventBusFactory {\r\n    static create(setup?: BpdEventBusSetup): IBpdEventBus {\r\n        if (!setup || !setup.queue || setup.queue.length === 0) {\r\n            return initBusInstance(getDefaultBusSetup());\r\n        }\r\n        let bus = new BpdEventBusFarm(setup.queue, setup.logger);\r\n        return bus;\r\n    }\r\n}\r\n\r\nexport class BpdEventBus implements IBpdEventBus {\r\n    #events: { [event: string]: BpdEventReceiver }\r\n    #eventHandler: IBpdEventEmitHandler;\r\n    #logger: IBpdEventBusLogging;\r\n    #counter: Generator<number, void, unknown>;\r\n    #name: string;\r\n    constructor(emitHandler: IBpdEventEmitHandler, name: string, logCallback?: BpdEventLoggerCallback) {\r\n        this.#events = {};\r\n        this.#eventHandler = emitHandler;\r\n        this.#counter = counter();\r\n        this.#name = name ?? \"EVENT_BUS\";\r\n        this.#logger = new BpdEventBusLogging(logCallback);\r\n    }\r\n\r\n    /**\r\n     * Attaches event to event bus\r\n     * \r\n     * @param {string} name - Event name\r\n     * @param {any} callback - callback function\r\n     * @param {ContextArgument} ctx - callback context with id\r\n     * @param {ContextArgument} target - optional - cui element which event shall be attached to\r\n     */\r\n    on(name: string, callback: any, context?: BpdEventDetails): string {\r\n        if (!are(name, callback)) {\r\n            this.#logger.error('on', \"Missing argument\")\r\n        }\r\n        // When context is not provided (e.g. anonymous function) then generate random\r\n        let id = this.prepareEventId(getContextArgumentId(context?.ctx));\r\n\r\n        this.#logger.info(\"on\", `Attaching new event: [${name}] for: [${id}]`)\r\n        if (!this.#events[name]) {\r\n            this.#events[name] = {}\r\n        }\r\n\r\n        this.#events[name][id] = { ctx: context?.ctx, callback: callback, target: context?.target }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n    * Detaches specific event from event bus\r\n    *\r\n    * @param {string} name - Event name\r\n    * @param {ContextArgument} ctx - callback context with id\r\n    */\r\n    detach(name: string, ctx: ContextArgument): void {\r\n        if (!is(name)) {\r\n            this.#logger.error(\"detach\", \"Missing argument\")\r\n        }\r\n        let ev = this.#events[name]\r\n        let id = getContextArgumentId(ctx);\r\n        this.#logger.info(\"detach\", `Detaching item: [${id}] from [${name}]`);\r\n        if (is(id) && this.isAttached(ev, id)) {\r\n            // @ts-ignore already checked \r\n            delete ev[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Detaches all callbacks from event\r\n    *\r\n    * @param {string} name - Event name\r\n    */\r\n    detachAll(name: string): void {\r\n        if (is(name) && this.#events[name]) {\r\n            delete this.#events[name]\r\n        } else {\r\n            this.#logger.error(\"detachAll\", \"Event name is missing or incorrect\")\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Emits event call to event bus\r\n    *\r\n    * @param {string} name - Event name\r\n    * @param {ContextArgument} cuid - id of component which emits the event\r\n    * @param {any[]} args  - event arguments\r\n    */\r\n    async emit(event: string, target: ContextArgument, ...args: any[]): Promise<boolean> {\r\n        if (!is(event)) {\r\n            throw new ArgumentError(\"Event name is incorrect\");\r\n        }\r\n        let id = getContextArgumentId(target);\r\n        this.#logger.info(\"emit\", `Emit: [${event}], id: [${id}]`);\r\n        await this.#eventHandler.handle(event, this.#events[event], id, args)\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Checks whether given context is already attached to specific event\r\n    *\r\n    * @param {string} name - Event name\r\n    * @param {ContextArgument} ctx - callback context with id\r\n    */\r\n    isSubscribing(name: string, ctx: ContextArgument) {\r\n        let ev = this.#events[name]\r\n        return this.isAttached(ev, getContextArgumentId(ctx));\r\n    }\r\n\r\n    private isAttached(ev: BpdEventReceiver, id: string | null): boolean {\r\n        //@ts-ignore id already checked\r\n        return is(ev) && is(id) && is(ev[id]);\r\n    }\r\n\r\n    private prepareEventId(ctx: string | null): string {\r\n        //@ts-ignore id already checked\r\n        return is(ctx) ? ctx : this.getRandomEventId();\r\n    }\r\n\r\n    private getRandomEventId(): string {\r\n        return this.#name + \"_\" + this.#counter.next().value;\r\n    }\r\n}\r\n\r\nexport class BpdEventBusFarm implements IBpdEventBus {\r\n    #events: { [event: string]: number };\r\n    #buses: IBpdEventBus[];\r\n    #last: number;\r\n    #logger: IBpdEventBusLogging;\r\n    #ctx: string;\r\n    constructor(setup: IBpdEventBusInstanceSetup[], logCallback?: BpdEventLoggerCallback) {\r\n        this.#ctx = \"EXT\";\r\n        this.#logger = new BpdEventBusLogging(logCallback);\r\n        this.#buses = [];\r\n        this.#events = {};\r\n        this.#last = 0;\r\n        if (is(setup)) {\r\n            this.#logger.info(this.#ctx, \"Initiating buses\")\r\n            let sorted = setup.length === 1 ? setup : setup.sort((first, second) => {\r\n                return first.priority - second.priority\r\n            })\r\n            sorted.forEach((item, index) => {\r\n                this.#buses.push(initBusInstance(item, logCallback))\r\n                this.#events = {\r\n                    ...this.#events,\r\n                    ...this.mapEvents(item.eventsDef, index),\r\n                }\r\n                this.#logger.info(this.#ctx, `Bus ${item.name} has been initialized with number: ${index}`)\r\n            })\r\n\r\n            this.#buses.push(initBusInstance(getDefaultBusSetup(), logCallback))\r\n            this.#last = this.#buses.length - 1;\r\n            this.#logger.info(this.#ctx, `Bus initialization finished`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches event to event bus\r\n     * \r\n     * @param {string} name - Event name\r\n     * @param {any} callback - callback function\r\n     * @param {BpdEventDetails} ctx - callback context with id\r\n     */\r\n    on(name: string, callback: any, ctx?: BpdEventDetails): string | null {\r\n\r\n        if (!are(name, callback)) {\r\n            throw new ArgumentError(\"Missing argument\")\r\n        }\r\n        return this.get(name).on(name, callback, ctx);\r\n    }\r\n\r\n    /**\r\n    * Detaches specific event from event bus\r\n    *\r\n    * @param {string} name - Event name\r\n    * @param {ContextArgument} ctx - callback context with id\r\n    */\r\n    detach(name: string, ctx: ContextArgument): void {\r\n        if (!are(name, ctx)) {\r\n            throw new ArgumentError(\"Missing argument\")\r\n        }\r\n        this.get(name).detach(name, ctx);\r\n    }\r\n\r\n    /**\r\n    * Detaches all callbacks from event\r\n    *\r\n    * @param {string} name - Event name\r\n    */\r\n    detachAll(name: string): void {\r\n        this.get(name).detachAll(name);\r\n    }\r\n\r\n    /**\r\n    * Emits event call to event bus\r\n    *\r\n    * @param {string} name - Event name\r\n    * @param {ContextArgument} ctx - id of component which emits the event\r\n    * @param {any[]} args  - event arguments\r\n    */\r\n    async emit(event: string, context: ContextArgument, ...args: any[]): Promise<boolean> {\r\n        if (!is(event)) {\r\n            throw new ArgumentError(\"Event name is incorrect\");\r\n        }\r\n        return this.get(event).emit(event, context, ...args);\r\n    }\r\n\r\n    /**\r\n    * Checks whether given context is already attached to specific event\r\n    *\r\n    * @param {string} name - Event name\r\n    * @param {ContextArgument} ctx - callback context with id\r\n    */\r\n    isSubscribing(name: string, ctx?: ContextArgument) {\r\n        return this.get(name).isSubscribing(name, ctx);\r\n    }\r\n\r\n    /**\r\n     * Creates mapping object from events array\r\n     * @param events events array\r\n     * @param index queue number\r\n     */\r\n    private mapEvents(events: string[], index: number): IBpdBusMapping {\r\n        return events.reduce((result: IBpdBusMapping, current: string) => {\r\n            if (!result[current]) {\r\n                return {\r\n                    ...result,\r\n                    [current]: index\r\n                }\r\n            }\r\n            return result;\r\n        }, {})\r\n    }\r\n\r\n    /**\r\n     * Retrives porper event bus based on event name\r\n     * @param event \r\n     */\r\n    private get(event: string): IBpdEventBus {\r\n        let idx = this.#events[event];\r\n        return this.#buses[idx ?? this.#last];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Function that initiates single bus insatnce \r\n * @param setup \r\n * @param logger \r\n */\r\nfunction initBusInstance(setup: IBpdEventBusInstanceSetup, logCallback?: BpdEventLoggerCallback): IBpdEventBus {\r\n    if (!are(setup.name, setup.handling)) {\r\n        throw new ArgumentError(\"Bus name or handler name is incorrect\");\r\n    }\r\n    let executor = new BpdCallbackExecutor();\r\n    let performer = getPerformer(executor, setup.policy);\r\n    let handler = BpdEventEmitHandlerFactory.get(setup.handling ?? \"\", performer, logCallback);\r\n    const bus = new BpdEventBus(handler, setup.name, logCallback);\r\n    return bus;\r\n}","import { BpdEventBusFactory } from \"./bus/engine\";\r\n\r\nexport const BPD_EVENT_BUS_VERSION = \"0.1.3\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        $bpdEventBusVersion: string;\r\n        $bpdEvenBusFactory: BpdEventBusFactory;\r\n    }\r\n}\r\n\r\nwindow.$bpdEventBusVersion = BPD_EVENT_BUS_VERSION;\r\nwindow.$bpdEvenBusFactory = BpdEventBusFactory;"],"sourceRoot":""}